#ifndef GLDEBUG
#define GLDEBUG

/*
GL_DEBUG_SOURCE_API					Calls to the OpenGL API
GL_DEBUG_SOURCE_WINDOW_SYSTEM		Calls to a window-system API
GL_DEBUG_SOURCE_SHADER_COMPILER		A compiler for a shading language
GL_DEBUG_SOURCE_THIRD_PARTY			An application associated with OpenGL
GL_DEBUG_SOURCE_APPLICATION			Generated by the user of this application
GL_DEBUG_SOURCE_OTHER				Some source that isn't one of these
*/
const char * debugSource(GLenum source)
{
	switch (source)
	{
	case GL_DEBUG_SOURCE_API:
		return "Call to the OpenGL API";
	case GL_DEBUG_SOURCE_WINDOW_SYSTEM:
		return "Call to a window-system API";
	case GL_DEBUG_SOURCE_SHADER_COMPILER:
		return "Shader compiler";
	case GL_DEBUG_SOURCE_THIRD_PARTY:
		return "A third party application associated with OpenGL";
	case GL_DEBUG_SOURCE_APPLICATION:
		return "An error defined by the author of the application";
	case GL_DEBUG_SOURCE_OTHER:
		return "";
	}
	return "";
}

/*
GL_DEBUG_TYPE_ERROR					An error, typically from the API
GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR	Some behavior marked deprecated has been used
GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR	Something has invoked undefined behavior
GL_DEBUG_TYPE_PORTABILITY			Some functionality the user relies upon is not portable
GL_DEBUG_TYPE_PERFORMANCE			Code has triggered possible performance issues
GL_DEBUG_TYPE_MARKER				Command stream annotation
GL_DEBUG_TYPE_PUSH_GROUP			Group pushing
GL_DEBUG_TYPE_POP_GROUP				Group popping
GL_DEBUG_TYPE_OTHER					Some type that isn't one of these
*/
const char * debugType(GLenum type)
{
	switch (type) 
	{
	case GL_DEBUG_TYPE_ERROR:
		return "Error from the API";
	case GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR:
		return "Deprecated behavior";
	case GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR:
		return "Undefined behavior";
	case GL_DEBUG_TYPE_PORTABILITY:
		return "Portability";
	case GL_DEBUG_TYPE_PERFORMANCE:
		return "Performance";
	case GL_DEBUG_TYPE_MARKER:
		return "Command stream annotation";
	case GL_DEBUG_TYPE_PUSH_GROUP:
		return "Group pushing";
	case GL_DEBUG_TYPE_POP_GROUP:
		return "Group popping";
	case GL_DEBUG_TYPE_OTHER:
		return "";
	}
	return "";
}


/*
GL_DEBUG_SEVERITY_HIGH				All OpenGL Errors, shader compilation/linking errors, or highly-dangerous undefined behavior
GL_DEBUG_SEVERITY_MEDIUM			Major performance warnings, shader compilation/linking warnings, or the use of deprecated functionality
GL_DEBUG_SEVERITY_LOW				Redundant state change performance warning, or unimportant undefined behavior
GL_DEBUG_SEVERITY_NOTIFICATION		Anything that isn't an error or performance issue.
*/
const char * debugSeverity(GLenum severity)
{
	switch (severity)
	{
		case GL_DEBUG_SEVERITY_HIGH:
			return "High (error or undefined behavior)";
		case GL_DEBUG_SEVERITY_MEDIUM:
			return "Medium (major warning or deprecated functionality use)";
		case GL_DEBUG_SEVERITY_LOW:
			return "Low (minor warning or unimportant undefined behavior)";
		case GL_DEBUG_SEVERITY_NOTIFICATION:
			return "Notification";
	}
	return "";
}

#endif