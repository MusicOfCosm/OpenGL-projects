#version 460 core

//Default is 1 pixel per workgroup in each dimensions
layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
layout (rgba32f, binding = 0) uniform image2D imgOut;
layout (rgba32f, binding = 1) uniform image2D agents;

void movement(inout vec2 pos, inout float orient);

uniform float time;
uniform ivec2 NUMBER;
uniform float SPEED;
uniform int   SENSOR_RANGE;
uniform int   SENSOR_SIZE;
uniform float SA;
uniform float RA;
uniform bool  BOUNDARY;
uniform bool  BLUR;

uniform int WIDTH;
uniform int HEIGHT;
#define PI 3.14159265358979323846

float random(in vec2 st) {
	return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);
}

//gl_LocalInvocationID.xy * gl_WorkGroupID.xy == gl_GlobalInvocationID.xy == positions
ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
void main()
{
	if (texelCoord.x < WIDTH && texelCoord.y < HEIGHT) {
		vec2 agentPos = imageLoad(agents, texelCoord).xy;
		float orientation = imageLoad(agents, texelCoord).z;
		movement(agentPos, orientation);
		imageStore(imgOut, ivec2(agentPos), vec4(1.0));
		imageStore(agents, texelCoord, vec4(agentPos, orientation, 1.0));
	}
	memoryBarrierImage();

	vec4 fade;
	
	if (BLUR) {
		fade = vec4(vec3(0.0), 1.0);
		vec3 sum = vec3(0.0);
		for (int offsetX = -1; offsetX <= 1; ++offsetX) {
			for (int offsetY = -1; offsetY <= 1; ++offsetY) {
				int sampleX = texelCoord.x + offsetX;
				int sampleY = texelCoord.y + offsetY;
				sampleX < 0 && !BOUNDARY ? sampleX = WIDTH-1 : sampleX >= WIDTH && !BOUNDARY ? sampleX = 0 : 0;
				sampleY < 0 && !BOUNDARY ? sampleY = HEIGHT-1 : sampleY >= HEIGHT && !BOUNDARY ? sampleY = 0 : 0;

				if (sampleX >= 0 && sampleX < WIDTH && sampleX >= 0 && sampleX < WIDTH)
					{sum += imageLoad(imgOut, ivec2(sampleX, sampleY)).rgb;}
			}
		}
		fade.rgb = sum/9;
	}
	else fade = imageLoad(imgOut, texelCoord);
	fade.r > 0 ? fade.r -= 1./250 : fade.r = 0;
	fade.g > 0 ? fade.g -= 1./250 : fade.g = 0;
	fade.b > 0 ? fade.b -= 1./250 : fade.b = 0;
	//fade.rgb -= 1./250;
	
	memoryBarrierImage();
	imageStore(imgOut, texelCoord, fade);
}

void Boundary(inout float x, inout float y)
{
	if (BOUNDARY == true) {
		if (x >= WIDTH-1) {
			x = float(WIDTH-1);
		}
		else if (x < 0) {
			x = 0;
		}

		if (y >= HEIGHT-1) {
			y = float(HEIGHT-1);
		}
		else if (y < 0) {
			y = 0;
		}
	}

	else {
		if (x >= WIDTH-1) {
			x -= WIDTH-1;
		}
		else if (x < 0) {
			x += WIDTH-1;
		}

		if (y >= HEIGHT-1) {
			y -= HEIGHT-1;
		}
		else if (y < 0) {
			y += HEIGHT-1;
		}
	}
}
void Boundary(inout int x, inout int y)
{
		if (BOUNDARY == true) {
		if (x >= WIDTH) {
			x = WIDTH-1;
		}
		else if (x < 0) {
			x = 0;
		}

		if (y >= HEIGHT) {
			y = HEIGHT-1;
		}
		else if (y < 0) {
			y = 0;
		}
	}

	else {
		if (x >= WIDTH) {
			x -= WIDTH;
		}
		else if (x < 0) {
			x += WIDTH;
		}

		if (y >= HEIGHT) {
			y -= HEIGHT;
		}
		else if (y < 0) {
			y += HEIGHT;
		}
	}
}



float sense(in float sensorAngleOffset, in vec2 agent, in float orient) {
	float sensorAngle = orient + sensorAngleOffset;
	float sensorDirX = cos(sensorAngle);
	float sensorDirY = sin(sensorAngle);
	int sensorCentreX = int(round(agent.x + sensorDirX * SENSOR_RANGE));
	int sensorCentreY = int(round(agent.y + sensorDirY * SENSOR_RANGE));
	float sum = 0.0f;

	for (int offsetX = -SENSOR_SIZE; offsetX <= SENSOR_SIZE; offsetX++) { //Goes from -SENSOR_SIZE to SENSOR_SIZE
		for (int offsetY = -SENSOR_SIZE; offsetY <= SENSOR_SIZE; offsetY++) {
			int posX = sensorCentreX + offsetX;
			int posY = sensorCentreY + offsetY;
			Boundary(posX, posY); //resetting posX and posY to be inside the bounds
			
			sum += imageLoad(imgOut, ivec2(posX, posY)).x;
		}
	}

	return sum;
}


void movement(inout vec2 pos, inout float orient /*, int index, int number*/)
{
	float forward = sense(0.0f, pos, orient);
	float left = sense(SA, pos, orient);
	float right = sense(-SA, pos, orient);
		
	if (forward >= left && forward >= right) {
		;
	}
		
	else if (forward < left && forward < right) {
		orient += random((vec2(time)+gl_GlobalInvocationID.xy)/2)*2*RA-RA;
	}
		
	else if (left > right) {
		orient += RA;
	}
		
	else if (left < right) {
		orient += -RA;
	}
	
	//moving
	pos.x += SPEED * cos(orient);
	pos.y += SPEED * sin(orient);
	if (pos.x < 0 || pos.x >= WIDTH || pos.y < 0 || pos.y >= HEIGHT) {
		if (BOUNDARY == true) {
			orient = random((vec2(time)+gl_GlobalInvocationID.xy)/2)*(PI*2);
		}
		Boundary(pos.x, pos.y);
	}
}